
plugins {
    id 'java'
    id 'jacoco'
    id("com.github.spacialcircumstances.gradle-cucumber-reporting") version "0.1.25"
    id("org.sonarqube") version "4.4.0.3356"
    id "maven-publish"
//    id("net.wooga.slack") version "3.0.0"
    id ('com.github.johnrengelman.processes') version '0.5.0'
    // Plugin pour la gestion des processus (si n√©cessaire)
    id 'de.zebrajaeger.sendMail' version("0.1.1")
    id "com.github.jk1.dependency-license-report" version "1.16"


}

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()
}


dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
//    testRuntimeOnly "io.github.boolivar.jdoctest:jdoc-spock:0.10.1"
    //mail
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    //slack
//    implementation 'org.apache.httpcomponents:httpclient:4.5.13' // D√©pendance pour HttpClient


}
//cucumber
cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('reports/example-report.json',)
}
//jacoco
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
//    finalizedBy sonar

}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}



//sonarQube
sonar {
    properties {
        property "sonar.projectKey", "tp5"
        property "sonar.host.url", "http://197.140.142.82:9000"
        //property "sonar.sources", "src/main/java"
       // property "sonar.tests", "src/test/java"
       // property "sonar.skipCompile", "true"
//        property "sonar.login", "Amine"
//        property "sonar.password", "amine"
    }
}


//sonar {

//    properties {
//        property "sonar.projectKey", "mezenner-ci-cd"
//        property "sonar.host.url", "http://sonarqube-custom:9000/"
//        property "sonar.java.binaries", "build/classes/java/main"
//        property "sonar.sources", "src/main/java"
//        property "sonar.tests", "src/test/java"
//        property "sonar.login", "admin"
//        property "sonar.password", "Mezenner_2003"
//    }
//}
//./gradlew javadoc.   === documentation



publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/49zkzj8yUoKcsN0APiQC/'
            credentials {
                username 'myMavenRepo'
                password '1234'
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}



// slack

//task notifySlack {
//    doLast {
//        def webhookUrl = 'https://hooks.slack.com/services/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' // Remplacez par votre Webhook URL
//        def message = '{"text": "üöÄ D√©ploiement termin√© avec succ√®s via Gradle !"}'
//
//        // Utilisation de HttpURLConnection
//        try {
//            def url = new URL(webhookUrl)
//            def connection = (HttpURLConnection) url.openConnection()
//            connection.requestMethod = 'POST'
//            connection.setRequestProperty("Content-Type", "application/json")
//            connection.doOutput = true
//            connection.outputStream.write(message.getBytes("UTF-8"))
//
//            // Lire la r√©ponse
//            def responseCode = connection.responseCode
//            println "Notification Slack envoy√©e avec succ√®s ! R√©ponse: " + responseCode
//        } catch (Exception e) {
//            println "Erreur lors de l'envoi de la notification Slack : ${e.message}"
//        }
//    }
//}
//
//tasks.publish {
//    finalizedBy notifySlack
//}


//slack 2

//task notifySlack {
//    doLast {
//        // Vous pouvez utiliser des API pour envoyer des messages √† Slack
//        def slackWebhookUrl = 'https://hooks.slack.com/services/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'
//        def message = '{"text": ""üöÄ Le d√©ploiement de la biblioth√®que a √©t√© effectu√© avec succ√®s via Gradle !"}'
//
//        // Utilisation de curl pour envoyer la notification
//        exec {
//            commandLine 'curl', '-X', 'POST', '--data', message, slackWebhookUrl
//        }
//    }
//}
//tasks.publish {
//  finalizedBy notifySlack
//}
task sendSlackNotification {
    doLast {
        def payload = '''
        {
            "text": ":rocket: *Deployment completed successfully!* :tada:",
            "attachments": [
                {
                    
                    "text": " D√©ploiement termin√© avec succ√®s via Gradle !",
                    
                }
            ]
        }
        '''
        def slackWebhookUrl = "https://hooks.slack.com/services/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"
        def url = new URL(slackWebhookUrl)
        def connection = url.openConnection()
        connection.setRequestMethod("POST")
        connection.setDoOutput(true)
        connection.setRequestProperty("Content-Type", "application/json")
        connection.getOutputStream().write(payload.getBytes("UTF-8"))
        def responseCode = connection.getResponseCode()

    }
}
tasks.publish {
  finalizedBy sendSlackNotification
}
//email
sendMail {
    smtpServer {
        host "smtp.gmail.com"
        port 587
        user "lm_aitmekideche@esi.dz"
        password "cfyv wazt hejs tjna"
    }
    mail {
        from "lm_aitmekideche@esi.dz"
        to "lm_aitmekideche@esi.dz"
//        attachments file("build.gradle")
//                layout.projectDirectory.file("settings.gradle"),
                body " üöÄ Le d√©ploiement de la biblioth√®que a √©t√© effectu√© avec succ√®s via Gradle"
    }
}
task publishAndNotify {
    doLast {
        sendMail.execute() // Execute sendMail task after publish
    }
}
publish.finalizedBy('sendMail')
